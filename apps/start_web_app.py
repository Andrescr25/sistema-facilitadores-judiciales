#!/usr/bin/env python3
"""
Script para iniciar la aplicaci√≥n web completa.
Inicia tanto la API como la interfaz Streamlit.
"""

import subprocess
import time
import os
import sys
import signal
import threading
from typing import List

class WebAppManager:
    def __init__(self):
        self.processes: List[subprocess.Popen] = []
        self.running = False
    
    def start_api(self):
        """Inicia la API FastAPI."""
        print("üöÄ Iniciando API FastAPI...")
        try:
            # Usar la API simplificada
            process = subprocess.Popen([
                sys.executable, "api_simple.py"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(process)
            print("‚úÖ API iniciada en puerto 8000")
            return True
        except Exception as e:
            print(f"‚ùå Error iniciando API: {e}")
            return False
    
    def start_streamlit(self):
        """Inicia la interfaz Streamlit."""
        print("üåê Iniciando interfaz Streamlit...")
        try:
            # Usar la interfaz avanzada
            process = subprocess.Popen([
                sys.executable, "-m", "streamlit", "run", 
                "app_streamlit_advanced.py",
                "--server.port", "8501",
                "--server.headless", "true"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(process)
            print("‚úÖ Interfaz Streamlit iniciada en puerto 8501")
            return True
        except Exception as e:
            print(f"‚ùå Error iniciando Streamlit: {e}")
            return False
    
    def wait_for_api(self, timeout=30):
        """Espera a que la API est√© disponible."""
        import requests
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                response = requests.get("http://localhost:8000/health", timeout=2)
                if response.status_code == 200:
                    print("‚úÖ API est√° lista")
                    return True
            except:
                pass
            time.sleep(1)
        
        print("‚ùå Timeout esperando API")
        return False
    
    def start(self):
        """Inicia toda la aplicaci√≥n."""
        print("=" * 60)
        print("ü§ñ Bot de Facilitadores Judiciales - Aplicaci√≥n Web")
        print("=" * 60)
        
        # Verificar que estamos en el directorio correcto
        if not os.path.exists("api_simple.py"):
            print("‚ùå Error: No se encuentra api_simple.py")
            print("   Aseg√∫rate de ejecutar este script desde el directorio del proyecto")
            return False
        
        if not os.path.exists("app_streamlit_advanced.py"):
            print("‚ùå Error: No se encuentra app_streamlit_advanced.py")
            print("   Aseg√∫rate de ejecutar este script desde el directorio del proyecto")
            return False
        
        # Iniciar API
        if not self.start_api():
            return False
        
        # Esperar a que la API est√© lista
        if not self.wait_for_api():
            self.stop()
            return False
        
        # Iniciar Streamlit
        if not self.start_streamlit():
            self.stop()
            return False
        
        self.running = True
        
        print("\n" + "=" * 60)
        print("üéâ ¬°Aplicaci√≥n iniciada exitosamente!")
        print("=" * 60)
        print("üì° API Backend: http://localhost:8000")
        print("üåê Interfaz Web: http://localhost:8501")
        print("üìö Documentaci√≥n API: http://localhost:8000/docs")
        print("=" * 60)
        print("\nüí° Instrucciones:")
        print("1. Abre tu navegador en http://localhost:8501")
        print("2. Inicia sesi√≥n como 'admin' para acceder al panel de administraci√≥n")
        print("3. Sube documentos en el panel de admin para entrenar el bot")
        print("4. Haz preguntas en el chat")
        print("\n‚èπÔ∏è  Presiona Ctrl+C para detener la aplicaci√≥n")
        print("=" * 60)
        
        return True
    
    def stop(self):
        """Detiene toda la aplicaci√≥n."""
        print("\nüõë Deteniendo aplicaci√≥n...")
        
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
            except Exception as e:
                print(f"Error deteniendo proceso: {e}")
        
        self.processes.clear()
        self.running = False
        print("‚úÖ Aplicaci√≥n detenida")
    
    def run(self):
        """Ejecuta la aplicaci√≥n hasta que se detenga."""
        if not self.start():
            return
        
        try:
            # Mantener la aplicaci√≥n corriendo
            while self.running:
                time.sleep(1)
                
                # Verificar que los procesos sigan corriendo
                for process in self.processes:
                    if process.poll() is not None:
                        print(f"‚ùå Proceso terminado inesperadamente: {process}")
                        self.running = False
                        break
                        
        except KeyboardInterrupt:
            print("\nüõë Interrupci√≥n del usuario")
        finally:
            self.stop()

def main():
    """Funci√≥n principal."""
    manager = WebAppManager()
    manager.run()

if __name__ == "__main__":
    main()
